// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using System;
using System.Collections.Generic;
using Microsoft.EntityFrameworkCore;

namespace Libreria_API.Models;

public partial class LibreriaContext : DbContext
{
    public LibreriaContext(DbContextOptions<LibreriaContext> options)
        : base(options)
    {
    }

    public virtual DbSet<Autore> Autores { get; set; }

    public virtual DbSet<AutoresLibro> AutoresLibros { get; set; }

    public virtual DbSet<Barrio> Barrios { get; set; }

    public virtual DbSet<Categoria> Categorias { get; set; }

    public virtual DbSet<Ciudade> Ciudades { get; set; }

    public virtual DbSet<Cliente> Clientes { get; set; }

    public virtual DbSet<Contacto> Contactos { get; set; }

    public virtual DbSet<DetalleFactura> DetalleFacturas { get; set; }

    public virtual DbSet<DetallePedido> DetallePedidos { get; set; }

    public virtual DbSet<Editoriale> Editoriales { get; set; }

    public virtual DbSet<EstadosEnvio> EstadosEnvios { get; set; }

    public virtual DbSet<Factura> Facturas { get; set; }

    public virtual DbSet<FacturasFormaspago> FacturasFormaspagos { get; set; }

    public virtual DbSet<Financiera> Financieras { get; set; }

    public virtual DbSet<FormapagosCliente> FormapagosClientes { get; set; }

    public virtual DbSet<FormasEnvio> FormasEnvios { get; set; }

    public virtual DbSet<FormasPago> FormasPagos { get; set; }

    public virtual DbSet<Genero> Generos { get; set; }

    public virtual DbSet<Idioma> Idiomas { get; set; }

    public virtual DbSet<Libro> Libros { get; set; }

    public virtual DbSet<LibrosCategoria> LibrosCategorias { get; set; }

    public virtual DbSet<LibrosGenero> LibrosGeneros { get; set; }

    public virtual DbSet<Nacionalidade> Nacionalidades { get; set; }

    public virtual DbSet<Pedido> Pedidos { get; set; }

    public virtual DbSet<Provincia> Provincias { get; set; }

    public virtual DbSet<Sexo> Sexos { get; set; }

    public virtual DbSet<TiposContacto> TiposContactos { get; set; }

    public virtual DbSet<TiposDocumento> TiposDocumentos { get; set; }

    public virtual DbSet<TrackingEnvio> TrackingEnvios { get; set; }

    public virtual DbSet<Usuario> Usuarios { get; set; }

    protected override void OnModelCreating(ModelBuilder modelBuilder)
    {
        modelBuilder.Entity<Autore>(entity =>
        {
            entity.HasKey(e => e.IdAutor).HasName("pk_autor");

            entity.ToTable("autores");

            entity.Property(e => e.IdAutor).HasColumnName("id_autor");
            entity.Property(e => e.Apellido)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("apellido");
            entity.Property(e => e.Biografia)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("biografia");
            entity.Property(e => e.FechaNacimiento).HasColumnName("fecha_nacimiento");
            entity.Property(e => e.IdNacionalidad).HasColumnName("id_nacionalidad");
            entity.Property(e => e.IdSexo).HasColumnName("id_sexo");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nombre");

            entity.HasOne(d => d.IdNacionalidadNavigation).WithMany(p => p.Autores)
                .HasForeignKey(d => d.IdNacionalidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_autor_nacionalidad");

            entity.HasOne(d => d.IdSexoNavigation).WithMany(p => p.Autores)
                .HasForeignKey(d => d.IdSexo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_autor_sexo");
        });

        modelBuilder.Entity<AutoresLibro>(entity =>
        {
            entity.HasKey(e => e.IdAutorLibro).HasName("pk_autor_libro");

            entity.ToTable("autores_libros");

            entity.Property(e => e.IdAutorLibro)
                .ValueGeneratedNever()
                .HasColumnName("id_autor_libro");
            entity.Property(e => e.IdAutor).HasColumnName("id_autor");
            entity.Property(e => e.IdLibro).HasColumnName("id_libro");

            entity.HasOne(d => d.IdAutorNavigation).WithMany(p => p.AutoresLibros)
                .HasForeignKey(d => d.IdAutor)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_autor");

            entity.HasOne(d => d.IdLibroNavigation).WithMany(p => p.AutoresLibros)
                .HasForeignKey(d => d.IdLibro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_librosAutores");
        });

        modelBuilder.Entity<Barrio>(entity =>
        {
            entity.HasKey(e => e.IdBarrio).HasName("pk_barrio");

            entity.ToTable("barrios");

            entity.Property(e => e.IdBarrio).HasColumnName("id_barrio");
            entity.Property(e => e.Barrio1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("barrio");
            entity.Property(e => e.IdCiudad).HasColumnName("id_ciudad");

            entity.HasOne(d => d.IdCiudadNavigation).WithMany(p => p.Barrios)
                .HasForeignKey(d => d.IdCiudad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ciudad_barrio");
        });

        modelBuilder.Entity<Categoria>(entity =>
        {
            entity.HasKey(e => e.IdCategoria).HasName("pk_categoria");

            entity.ToTable("categorias");

            entity.Property(e => e.IdCategoria).HasColumnName("id_categoria");
            entity.Property(e => e.Categoria1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("categoria");
        });

        modelBuilder.Entity<Ciudade>(entity =>
        {
            entity.HasKey(e => e.IdCiudad).HasName("pk_ciudad");

            entity.ToTable("ciudades");

            entity.Property(e => e.IdCiudad).HasColumnName("id_ciudad");
            entity.Property(e => e.Ciudad)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("ciudad");
            entity.Property(e => e.IdProvincia).HasColumnName("id_provincia");

            entity.HasOne(d => d.IdProvinciaNavigation).WithMany(p => p.Ciudades)
                .HasForeignKey(d => d.IdProvincia)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_ciudad_provincia");
        });

        modelBuilder.Entity<Cliente>(entity =>
        {
            entity.HasKey(e => e.CodCliente).HasName("pk_cliente");

            entity.ToTable("clientes");

            entity.Property(e => e.CodCliente).HasColumnName("cod_cliente");
            entity.Property(e => e.Apellido)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("apellido");
            entity.Property(e => e.Calle)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("calle");
            entity.Property(e => e.Cp)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("cp");
            entity.Property(e => e.Dpto)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("dpto");
            entity.Property(e => e.Email)
                .HasMaxLength(50)
                .HasColumnName("email");
            entity.Property(e => e.FechaNacimiento).HasColumnName("fecha_nacimiento");
            entity.Property(e => e.FechaRegistro)
                .HasColumnType("datetime")
                .HasColumnName("fecha_registro");
            entity.Property(e => e.IdBarrio).HasColumnName("id_barrio");
            entity.Property(e => e.IdNacionalidad).HasColumnName("id_nacionalidad");
            entity.Property(e => e.IdSexo).HasColumnName("id_sexo");
            entity.Property(e => e.IdTipoDoc).HasColumnName("id_tipo_doc");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("nombre");
            entity.Property(e => e.Nro).HasColumnName("nro");
            entity.Property(e => e.NroDoc).HasColumnName("nro_doc");
            entity.Property(e => e.Piso)
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("piso");

            entity.HasOne(d => d.IdBarrioNavigation).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.IdBarrio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cliente_barrio");

            entity.HasOne(d => d.IdNacionalidadNavigation).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.IdNacionalidad)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cliente_nacionalidad");

            entity.HasOne(d => d.IdSexoNavigation).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.IdSexo)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cliente_sexo");

            entity.HasOne(d => d.IdTipoDocNavigation).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.IdTipoDoc)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_cliente_tiposdoc");

            entity.HasOne(d => d.IdUsuarioNavigation).WithMany(p => p.Clientes)
                .HasForeignKey(d => d.IdUsuario)
                .HasConstraintName("fk_clientes_usuarios");
        });

        modelBuilder.Entity<Contacto>(entity =>
        {
            entity.HasKey(e => e.IdContacto).HasName("pk_contacto");

            entity.ToTable("contactos");

            entity.Property(e => e.IdContacto).HasColumnName("id_contacto");
            entity.Property(e => e.CodCliente).HasColumnName("cod_cliente");
            entity.Property(e => e.Contacto1)
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("contacto");
            entity.Property(e => e.IdTipoContacto).HasColumnName("id_tipo_contacto");

            entity.HasOne(d => d.CodClienteNavigation).WithMany(p => p.Contactos)
                .HasForeignKey(d => d.CodCliente)
                .HasConstraintName("fk_contactos_clientes");

            entity.HasOne(d => d.IdTipoContactoNavigation).WithMany(p => p.Contactos)
                .HasForeignKey(d => d.IdTipoContacto)
                .HasConstraintName("fk_contactos_tipos");
        });

        modelBuilder.Entity<DetalleFactura>(entity =>
        {
            entity.HasKey(e => e.IdDetalleFactura).HasName("pk_detalle_fac");

            entity.ToTable("detalle_facturas");

            entity.Property(e => e.IdDetalleFactura).HasColumnName("id_detalle_factura");
            entity.Property(e => e.Cantidad).HasColumnName("cantidad");
            entity.Property(e => e.CodLibro).HasColumnName("cod_libro");
            entity.Property(e => e.NroFactura).HasColumnName("nro_factura");
            entity.Property(e => e.Precio)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("precio");
            entity.Property(e => e.Recargo)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("recargo");

            entity.HasOne(d => d.CodLibroNavigation).WithMany(p => p.DetalleFacturas)
                .HasForeignKey(d => d.CodLibro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_detalle_libro");

            entity.HasOne(d => d.NroFacturaNavigation).WithMany(p => p.DetalleFacturas)
                .HasForeignKey(d => d.NroFactura)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_detalle_factura");
        });

        modelBuilder.Entity<DetallePedido>(entity =>
        {
            entity.HasKey(e => e.IdDetallePedido).HasName("pk_detalle_pedidos");

            entity.ToTable("detalle_pedidos");

            entity.Property(e => e.IdDetallePedido).HasColumnName("id_detalle_pedido");
            entity.Property(e => e.Cantidad).HasColumnName("cantidad");
            entity.Property(e => e.CodLibro).HasColumnName("cod_libro");
            entity.Property(e => e.NroPedido).HasColumnName("nro_pedido");
            entity.Property(e => e.Precio)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("precio");

            entity.HasOne(d => d.CodLibroNavigation).WithMany(p => p.DetallePedidos)
                .HasForeignKey(d => d.CodLibro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_detallepedidos_libros");

            entity.HasOne(d => d.NroPedidoNavigation).WithMany(p => p.DetallePedidos)
                .HasForeignKey(d => d.NroPedido)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_detallepedidos_pedido");
        });

        modelBuilder.Entity<Editoriale>(entity =>
        {
            entity.HasKey(e => e.IdEditorial).HasName("pk_editorial");

            entity.ToTable("editoriales");

            entity.Property(e => e.IdEditorial).HasColumnName("id_editorial");
            entity.Property(e => e.Editorial)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("editorial");
        });

        modelBuilder.Entity<EstadosEnvio>(entity =>
        {
            entity.HasKey(e => e.IdEstadoEnvio).HasName("pk_estado_envio");

            entity.ToTable("estados_envios");

            entity.Property(e => e.IdEstadoEnvio).HasColumnName("id_estado_envio");
            entity.Property(e => e.EstadoActual)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("estado_actual");
        });

        modelBuilder.Entity<Factura>(entity =>
        {
            entity.HasKey(e => e.NroFactura).HasName("pk_factura");

            entity.ToTable("facturas");

            entity.Property(e => e.NroFactura)
                .ValueGeneratedNever()
                .HasColumnName("nro_factura");
            entity.Property(e => e.CodCliente).HasColumnName("cod_cliente");
            entity.Property(e => e.CostoEnvio)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("costo_envio");
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("fecha");
            entity.Property(e => e.FechaEntrega)
                .HasColumnType("datetime")
                .HasColumnName("fecha_entrega");
            entity.Property(e => e.FechaPago)
                .HasColumnType("datetime")
                .HasColumnName("fecha_pago");
            entity.Property(e => e.IdFormaEnvio).HasColumnName("id_forma_envio");

            entity.HasOne(d => d.CodClienteNavigation).WithMany(p => p.Facturas)
                .HasForeignKey(d => d.CodCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_facturas_clientes");

            entity.HasOne(d => d.IdFormaEnvioNavigation).WithMany(p => p.Facturas)
                .HasForeignKey(d => d.IdFormaEnvio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_facturas_formasenvio");
        });

        modelBuilder.Entity<FacturasFormaspago>(entity =>
        {
            entity.HasKey(e => e.IdFacturaPago).HasName("pk_facturas_formaspago");

            entity.ToTable("facturas_formaspago");

            entity.Property(e => e.IdFacturaPago).HasColumnName("id_factura_pago");
            entity.Property(e => e.IdFormaPago).HasColumnName("id_forma_pago");
            entity.Property(e => e.MontoParcial)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("monto_parcial");
            entity.Property(e => e.NroFactura).HasColumnName("nro_factura");

            entity.HasOne(d => d.IdFormaPagoNavigation).WithMany(p => p.FacturasFormaspagos)
                .HasForeignKey(d => d.IdFormaPago)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_facturas_pagos");

            entity.HasOne(d => d.NroFacturaNavigation).WithMany(p => p.FacturasFormaspagos)
                .HasForeignKey(d => d.NroFactura)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_facturas_factura");
        });

        modelBuilder.Entity<Financiera>(entity =>
        {
            entity.HasKey(e => e.IdFinanciera).HasName("pk_financiera");

            entity.ToTable("financieras");

            entity.Property(e => e.IdFinanciera).HasColumnName("id_financiera");
            entity.Property(e => e.Nombre)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nombre");
        });

        modelBuilder.Entity<FormapagosCliente>(entity =>
        {
            entity.HasKey(e => e.IdFormapagoCliente).HasName("pk_formapagos_clientes");

            entity.ToTable("formapagos_clientes");

            entity.Property(e => e.IdFormapagoCliente).HasColumnName("id_formapago_cliente");
            entity.Property(e => e.CodCliente).HasColumnName("cod_cliente");
            entity.Property(e => e.Cvv).HasColumnName("cvv");
            entity.Property(e => e.FechaVencimiento).HasColumnName("fecha_vencimiento");
            entity.Property(e => e.IdFinanciera).HasColumnName("id_financiera");
            entity.Property(e => e.IdFormaPago).HasColumnName("id_forma_pago");
            entity.Property(e => e.NumTarjeta).HasColumnName("num_tarjeta");

            entity.HasOne(d => d.CodClienteNavigation).WithMany(p => p.FormapagosClientes)
                .HasForeignKey(d => d.CodCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_clientes");

            entity.HasOne(d => d.IdFinancieraNavigation).WithMany(p => p.FormapagosClientes)
                .HasForeignKey(d => d.IdFinanciera)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_financieras");

            entity.HasOne(d => d.IdFormaPagoNavigation).WithMany(p => p.FormapagosClientes)
                .HasForeignKey(d => d.IdFormaPago)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_formaspago");
        });

        modelBuilder.Entity<FormasEnvio>(entity =>
        {
            entity.HasKey(e => e.IdFormaEnvio).HasName("pk_forma_envio");

            entity.ToTable("formas_envios");

            entity.Property(e => e.IdFormaEnvio).HasColumnName("id_forma_envio");
            entity.Property(e => e.FormaEnvio)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("forma_envio");
        });

        modelBuilder.Entity<FormasPago>(entity =>
        {
            entity.HasKey(e => e.IdFormaPago).HasName("pk_forma_pago");

            entity.ToTable("formas_pagos");

            entity.Property(e => e.IdFormaPago).HasColumnName("id_forma_pago");
            entity.Property(e => e.FormaPago)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("forma_pago");
        });

        modelBuilder.Entity<Genero>(entity =>
        {
            entity.HasKey(e => e.IdGenero).HasName("pk_genero");

            entity.ToTable("generos");

            entity.Property(e => e.IdGenero).HasColumnName("id_genero");
            entity.Property(e => e.Genero1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("genero");
        });

        modelBuilder.Entity<Idioma>(entity =>
        {
            entity.HasKey(e => e.IdIdioma).HasName("pk_idioma");

            entity.ToTable("idiomas");

            entity.Property(e => e.IdIdioma).HasColumnName("id_idioma");
            entity.Property(e => e.Idioma1)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("idioma");
        });

        modelBuilder.Entity<Libro>(entity =>
        {
            entity.HasKey(e => e.CodLibro).HasName("pk_libro");

            entity.ToTable("libros");

            entity.Property(e => e.CodLibro).HasColumnName("cod_libro");
            entity.Property(e => e.Descripcion)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("descripcion");
            entity.Property(e => e.FechaLanzamiento).HasColumnName("fecha_lanzamiento");
            entity.Property(e => e.IdEditorial).HasColumnName("id_editorial");
            entity.Property(e => e.IdIdioma).HasColumnName("id_idioma");
            entity.Property(e => e.Isbn)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("isbn");
            entity.Property(e => e.Precio)
                .HasColumnType("decimal(10, 2)")
                .HasColumnName("precio");
            entity.Property(e => e.Stock).HasColumnName("stock");
            entity.Property(e => e.Titulo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("titulo");

            entity.HasOne(d => d.IdEditorialNavigation).WithMany(p => p.Libros)
                .HasForeignKey(d => d.IdEditorial)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_libros_editoriales");

            entity.HasOne(d => d.IdIdiomaNavigation).WithMany(p => p.Libros)
                .HasForeignKey(d => d.IdIdioma)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_libros_idiomas");
        });

        modelBuilder.Entity<LibrosCategoria>(entity =>
        {
            entity.HasKey(e => e.IdLibroCategoria).HasName("pk_libro_categoria");

            entity.ToTable("libros_categorias");

            entity.Property(e => e.IdLibroCategoria)
                .ValueGeneratedNever()
                .HasColumnName("id_libro_categoria");
            entity.Property(e => e.IdCategoria).HasColumnName("id_categoria");
            entity.Property(e => e.IdLibro).HasColumnName("id_libro");

            entity.HasOne(d => d.IdCategoriaNavigation).WithMany(p => p.LibrosCategoria)
                .HasForeignKey(d => d.IdCategoria)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_categorias_libros");

            entity.HasOne(d => d.IdLibroNavigation).WithMany(p => p.LibrosCategoria)
                .HasForeignKey(d => d.IdLibro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_libros_categoria");
        });

        modelBuilder.Entity<LibrosGenero>(entity =>
        {
            entity.HasKey(e => e.IdLibroGenero).HasName("Pk_libro_genero");

            entity.ToTable("libros_generos");

            entity.Property(e => e.IdLibroGenero)
                .ValueGeneratedNever()
                .HasColumnName("id_libro_genero");
            entity.Property(e => e.IdGenero).HasColumnName("id_genero");
            entity.Property(e => e.IdLibro).HasColumnName("id_libro");

            entity.HasOne(d => d.IdGeneroNavigation).WithMany(p => p.LibrosGeneros)
                .HasForeignKey(d => d.IdGenero)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_generoslibros");

            entity.HasOne(d => d.IdLibroNavigation).WithMany(p => p.LibrosGeneros)
                .HasForeignKey(d => d.IdLibro)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_librosgeneros");
        });

        modelBuilder.Entity<Nacionalidade>(entity =>
        {
            entity.HasKey(e => e.IdNacionalidad).HasName("pk_nacionalidad");

            entity.ToTable("nacionalidades");

            entity.Property(e => e.IdNacionalidad).HasColumnName("id_nacionalidad");
            entity.Property(e => e.Nacionalidad)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("nacionalidad");
        });

        modelBuilder.Entity<Pedido>(entity =>
        {
            entity.HasKey(e => e.NroPedido).HasName("pk_nro_pedido");

            entity.ToTable("pedidos");

            entity.Property(e => e.NroPedido).HasColumnName("nro_pedido");
            entity.Property(e => e.CodCliente).HasColumnName("cod_cliente");
            entity.Property(e => e.Estado).HasMaxLength(50);
            entity.Property(e => e.Fecha)
                .HasColumnType("datetime")
                .HasColumnName("fecha");
            entity.Property(e => e.FechaEntrega).HasColumnName("fecha_entrega");
            entity.Property(e => e.IdFormaEnvio).HasColumnName("id_forma_envio");
            entity.Property(e => e.InstruccionesAdicionales)
                .HasMaxLength(100)
                .IsUnicode(false)
                .HasColumnName("instrucciones_adicionales");

            entity.HasOne(d => d.CodClienteNavigation).WithMany(p => p.Pedidos)
                .HasForeignKey(d => d.CodCliente)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_pedidos_clientes");

            entity.HasOne(d => d.IdFormaEnvioNavigation).WithMany(p => p.Pedidos)
                .HasForeignKey(d => d.IdFormaEnvio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_pedidos_formas");
        });

        modelBuilder.Entity<Provincia>(entity =>
        {
            entity.HasKey(e => e.IdProvincia).HasName("pk_provincia");

            entity.ToTable("provincias");

            entity.Property(e => e.IdProvincia).HasColumnName("id_provincia");
            entity.Property(e => e.Provincia1)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("provincia");
        });

        modelBuilder.Entity<Sexo>(entity =>
        {
            entity.HasKey(e => e.IdSexo).HasName("pk_sexo");

            entity.ToTable("sexos");

            entity.Property(e => e.IdSexo).HasColumnName("id_sexo");
            entity.Property(e => e.Sexo1)
                .IsRequired()
                .HasMaxLength(10)
                .IsUnicode(false)
                .HasColumnName("sexo");
        });

        modelBuilder.Entity<TiposContacto>(entity =>
        {
            entity.HasKey(e => e.IdTipoContacto).HasName("pk_tipo_contacto");

            entity.ToTable("tipos_contactos");

            entity.Property(e => e.IdTipoContacto).HasColumnName("id_tipo_contacto");
            entity.Property(e => e.Tipo)
                .IsRequired()
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasColumnName("tipo");
        });

        modelBuilder.Entity<TiposDocumento>(entity =>
        {
            entity.HasKey(e => e.IdTipoDoc).HasName("pk_tipo_doc");

            entity.ToTable("tipos_documentos");

            entity.Property(e => e.IdTipoDoc).HasColumnName("id_tipo_doc");
            entity.Property(e => e.Tipo)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false)
                .HasColumnName("tipo");
        });

        modelBuilder.Entity<TrackingEnvio>(entity =>
        {
            entity.HasKey(e => e.IdTracking).HasName("PK__tracking__8877058D97E7AD69");

            entity.ToTable("tracking_envios");

            entity.Property(e => e.IdTracking).HasColumnName("id_tracking");
            entity.Property(e => e.FechaEstado)
                .HasColumnType("datetime")
                .HasColumnName("fecha_estado");
            entity.Property(e => e.IdEstadoEnvio).HasColumnName("id_estado_envio");
            entity.Property(e => e.NroPedido).HasColumnName("nro_pedido");
            entity.Property(e => e.Observaciones)
                .HasMaxLength(200)
                .IsUnicode(false)
                .HasColumnName("observaciones");

            entity.HasOne(d => d.IdEstadoEnvioNavigation).WithMany(p => p.TrackingEnvios)
                .HasForeignKey(d => d.IdEstadoEnvio)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tracking_estado");

            entity.HasOne(d => d.NroPedidoNavigation).WithMany(p => p.TrackingEnvios)
                .HasForeignKey(d => d.NroPedido)
                .OnDelete(DeleteBehavior.ClientSetNull)
                .HasConstraintName("fk_tracking_pedido");
        });

        modelBuilder.Entity<Usuario>(entity =>
        {
            entity.HasKey(e => e.IdUsuario).HasName("PK__Usuarios__5B65BF97E50A9084");

            entity.HasIndex(e => e.NombreUsuario, "UQ__Usuarios__6B0F5AE0413A1B71").IsUnique();

            entity.Property(e => e.ContrasenaHash)
                .IsRequired()
                .HasMaxLength(255)
                .IsUnicode(false);
            entity.Property(e => e.FechaAlta)
                .HasDefaultValueSql("(getdate())")
                .HasColumnType("datetime");
            entity.Property(e => e.NombreUsuario)
                .IsRequired()
                .HasMaxLength(50)
                .IsUnicode(false);
            entity.Property(e => e.Rol)
                .HasMaxLength(20)
                .IsUnicode(false)
                .HasDefaultValue("Cliente");
        });

        OnModelCreatingPartial(modelBuilder);
    }

    partial void OnModelCreatingPartial(ModelBuilder modelBuilder);
}